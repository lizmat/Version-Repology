use Test;
use Version::Repology;

plan 20;

my $v = Version::Repology.new("1.0foo.bar");
isa-ok $v, Version::Repology;

is $v, "1.0.f.b", 'is stringification correct';
is $v.raku, 'Version::Repology.new("1.0.f.b")', 'is .raku ok';
is-deeply $v.parts, (1,0,"f","b"), 'are the parts ok';
is-deeply $v.ranks, (non-zero, zero, letter-suffix, pre-release),
  'are the ranks ok';
is-deeply $v.bound, zero, 'default bound logic ok';

is-deeply $v cmp $v, Same, 'can we compare with cmp';
is-deeply $v < $v,  False, 'can we compare with <';
is-deeply $v <= $v,  True, 'can we compare with <=';
is-deeply $v >= $v,  True, 'can we compare with >=';
is-deeply $v > $v,  False, 'can we compare with >';
is-deeply $v != $v, False, 'can we compare with !=';

for \(:upper-bound), \(:bound<upper>) -> \c {
    my $u = Version::Repology.new("1.0", |c);
    isa-ok $u, Version::Repology;
    is-deeply $u.bound, upper-bound, 'did we get an upper-bound';
}

for \(:lower-bound), \(:bound<lower>) -> \c {
    my $l = Version::Repology.new("1.0", |c);
    isa-ok $l, Version::Repology;
    is-deeply $l.bound, lower-bound, 'did we get a lower-bound';
}

# vim: expandtab shiftwidth=4
