=begin pod

=head1 NAME

Version::Repology - Implement Repology Version logic

=head1 SYNOPSIS

=begin code :lang<raku>
use Version::Repology;

my $left  = Version::Repology.new("1.0");
my $right = Version::Repology.new("1.1");

# method interface
say $left.cmp($right);  # Less
say $left."<"($right);  # True

# infix interface
say $left cmp $right;  # Less
say $left < $right;    # True
=end code

=head1 DESCRIPTION

The C<Version::Repology> distribution provides a C<Version::Repology>
class that encapsulates the logic for creating a C<Version>-like
object with semantics matching the Repology implementation of
L<C<libversion>|https://github.com/repology/libversion/tree/master?tab=readme-ov-file#libversion>.

In order to avoid any dependencies, this implementation is a pure
Raku implementation.

=head1 FEATURES

From the C<libversion> documentation:

=head2 A short list of features

=item Simple versions, obviously: 0.9 < 1.0 < 1.1
=item Omitting insignificant components: 1.0 == 1.0.0
=item Leading zeroes: 1.001 == 1.1
=item Unusual separators: 1_2~3 == 1.2.3
=item Letter suffixes: 1.2 < 1.2a < 1.2b < 1.3

Alphanumeric prerelease components:
=item 1.0alpha1 == 1.0.alpha1 == 1.0a1 == 1.0.a1
=item 1.0alpha1 < 1.0alpha2 < 1.0beta1 < 1.0rc1 < 1.0

Awareness of pre-release keywords: alpha, beta, rc, pre
=item while 1.0 < 1.0a-1 (a treated as version addendum)
=item but 1.0alpha-1 < 1.0 (alpha is treated as prerelease marker)

Awareness post-release keywords: patch, post, pl, errata
=item while 1.0alpha1 < 1.0 (alpha is pre-release)
=item but 1.0 < 1.0patch1 < 1.1 (patch is post-release)

Customizable handling of C<p> keyword (it may mean either
"patch" or "pre").

Logic for checking whether a given version "belongs" to another
version logically.

=head1 INSTANTIATION

=begin code :lang<raku>
use Version::Repology;

my $v = Version::Repology.new("1.0");
my $p = Version::Repology.new("1.0", :p-is-patch);
my $a = Version::Repology.new("1.0", :any-is-patch);
my $u = Version::Repology.new("1.0", :upper-bound);
my $l = Version::Repology.new("1.0", :lower-bound);
my $n = Version::Repology.new("0.0.1", :no-leading-zero);
=end code

The basic instantion of a C<Version::Repology> object is done with
the C<new> method, taking the version string as a positional argument.

Additionally, the following named arguments can be specified:

=head2 :p-is-patch

If an alphabetic component consists of "p", then assume it's the same
as "patch", aka a post-release string.  If not specified, or specified
with a false value, will consider "p" as a pre-release string (the
same as "pre").

=head2 :any-is-patch

Any alphabetic component is assumed as "patch", aka a post-release
string.  If not specified, or specified with a false value, will
consider any alphabetic component as a pre-release string (the
same as "pre").

=head2 :upper-bound

If in comparison two objects are the same, then select this one as
being B<higher> in version.  Can also be specified as C<:bound<upper>>.

=head2 :lower-bound

If in comparison two objects are the same, then select this one as
being B<lower> in version.  Can also be specified as C<:bound<lower>>.

=head2 :no-leading-zero

Remove any leading C<0> parts from a version string so that C<0.0.1>
is the same as C<1>.  If not specified, or specified with a false
value, will B<not> remove any leading C<0> parts.

This is an additional feature in the Raku implementation only.

=head1 ACCESSORS

=head1 parts

=begin code :lang<raku>
my $a  = Version::Repology.new("1.0.foo");
dd $a.parts;  # (1, 0, "f")
=end code

Returns the values that are associated with each logical part of
the version.

=head1 ranks

=begin code :lang<raku>
my $a  = Version::Repology.new("1.0.foo");
say $a.ranks;  # (non-zero zero pre-release)
=end code

Returns the C<Rank> enums that are associated with each logical part
of the version.

=head1 bound

=begin code :lang<raku>
my $a  = Version::Repology.new("1.0", :upper-bound");
say $a.bound;  # upper-bound
=end code

Returns the special bound C<Rank> value.  This is C<zero> by default,
but can be changed with the C<:upper-bound> and C<:lower-bound> named
arguments on object instantiation.

=head1 OTHER METHODS

=head2 cmp

=begin code :lang<raku>
my $left  = Version::Repology.new("1.0");
my $right = Version::Repology.new("1.1");

say $left.cmp($left);   # Same
say $left.cmp($right);  # Less
say $right.cmp($left);  # More
=end code

The C<cmp> method returns the C<Order> of a comparison of the invocant
and the positional argument, which is either C<Less>, C<Same>, or
C<More>.  This method is the workhorse for comparisons.

=head2 eqv

=begin code :lang<raku>
my $left  = Version::Repology.new("1.0foo");
my $right = Version::Repology.new("1.0f");

say $left.eqv($right);  # True
=end code

The C<eqv> method returns whether the internal state of two
C<Version::Repology> objects is identical.  Note that does not
necessarily means that their stringification is the same, as any
alphabetical string is internally shortened to first lowercased
character for comparisons.

=head2 == != < <= > >=

=begin code :lang<raku>
my $left  = Version::Repology.new("1.0foo");
my $right = Version::Repology.new("1.0f");

say $left."=="($left);  # True
say $left."<"($right);  # True
=end code

These oddly named methods provide the same functionality as their
infix counterparts.  Please note that you B<must> use the C<"xx"()>
syntax, because otherwise the Raku compiler will assume you've made
a syntax error.

=head1 EXPORTED INFIXES

The following C<infix> candidates handling C<Version::Repology> are exported:
=item cmp (returns C<Order>)
=item eqv == != < <= > >= (returns C<Bool>)

=head1 EXPORTED ENUMS

=head2 Rank

The C<Rank> enum is used internally to facilitate the comparison between two
objects.  It is probably of little use outside the scope of the module itself.
But just in case it B<may> be useful in some situations, it B<is> exported.

It provides the following numeric enum values:
=item none
=item lower-bound
=item pre-release
=item zero
=item post-release
=item non-zero
=item letter-suffix
=item upper-bound

=head1 ALGORITHM

The actual algorithm is described in the
L<C<libversion repository>|https://github.com/repology/libversion/blob/master/doc/ALGORITHM.md>.

=head1 CREDITS

This module is based on the work done by Dmitry Marakasov on the
L<C<libversion>|https://github.com/repology/libversion/tree/master?tab=readme-ov-file#libversion>
project.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/Version-Repology .
Comments and Pull Requests are welcome.

If you like this module, or what Iâ€™m doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2025 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
